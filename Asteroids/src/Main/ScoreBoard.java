package Main;

import Other.HighScore;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JTable;
import javax.swing.table.DefaultTableColumnModel;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumn;
import javax.swing.table.TableModel;

public class ScoreBoard extends javax.swing.JFrame {

    protected static final int MAX__NUMBER_HIGH_SCORE = 10;
    protected ArrayList<HighScore> highScore;

    /**
     * Creates new form ScoreBoard
     */ 
   public ScoreBoard() {
        initComponents();

        DefaultTableColumnModel columns = new DefaultTableColumnModel();
        TableColumn date = new TableColumn();
        date.setHeaderValue("Date");
        TableColumn score = new TableColumn();
        score.setHeaderValue("Score");
        columns.addColumn(date);
        columns.addColumn(score);

        loadHighScore();

        tbHighScore.setColumnModel(columns);
        tbHighScore.setEnabled(false);
        this.addWindowListener(new WindowAdapter() {
            @Override
            public void windowClosing(WindowEvent we) {
                ScoreBoard.this.setVisible(false);
                welcomeScreen.setVisible(true);
            }
        });
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tbHighScore = new javax.swing.JTable();
        bOK = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);

        tbHighScore.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(tbHighScore);

        bOK.setText("OK");
        bOK.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bOKActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 375, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addGroup(layout.createSequentialGroup()
                .addGap(290, 290, 290)
                .addComponent(bOK, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 275, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(bOK)
                .addGap(0, 32, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

private void bOKActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bOKActionPerformed
    // TODO add your handling code here:
    this.setVisible(false);
    welcomeScreen.setVisible(true);
}//GEN-LAST:event_bOKActionPerformed

    protected void updateScoreBoard() {
        Object[] columnName = {"Name", "HighScore"};
        Object[][] rowData = new Object[Math.min(MAX__NUMBER_HIGH_SCORE,highScore.size())][2];

        for (int i = 0; i < Math.min(MAX__NUMBER_HIGH_SCORE,highScore.size()); i++) {
            rowData[i][0] = highScore.get(i).getName();
            rowData[i][1] = highScore.get(i).getScore();
        }

        TableModel dataModel = new DefaultTableModel(rowData, columnName);
        tbHighScore.setModel(dataModel);
    }

    private void loadHighScore() {
        highScore = new ArrayList<>();
        FileReader fr = null;
        try {
            File file = new File("HighScore.txt");
            fr = new FileReader(file);
            BufferedReader br = new BufferedReader(fr);
            String line;
            do {
                line = br.readLine();
                if (line.equals("end")) {
                    break;
                }
                String name = line;
                line = br.readLine();
                int score = Integer.parseInt(line);
                highScore.add(new HighScore(name, score));
            } while (true);
            fr.close();
        } catch (IOException | NullPointerException | NumberFormatException ex) {
            System.out.println("Invalid high score file");
            Logger.getLogger(WelcomeScreen.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
        }
    }

    protected void writeHighScore() {
        FileWriter fw = null;
        try {
            File file = new File("HighScore.txt");
            file.setWritable(true);
            fw = new FileWriter(file);
            BufferedWriter bw = new BufferedWriter(fw);
            String d = "\n";
            for (int i = 0; i < Math.min(MAX__NUMBER_HIGH_SCORE,highScore.size()); i++) {
                bw.write(highScore.get(i).getName() + d);
                bw.write(highScore.get(i).getScore() + d);
            }
            bw.write("end");
            bw.flush();
            bw.close();
        } catch (IOException ex) {
            Logger.getLogger(ScoreBoard.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            try {
                fw.close();
            } catch (IOException ex) {
                Logger.getLogger(ScoreBoard.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }

    protected JTable getHighScoreTable() {
        return tbHighScore;
    }

    protected void setWelcomeScreen(WelcomeScreen welcomeScreen) {
        this.welcomeScreen = welcomeScreen;
    }
    private WelcomeScreen welcomeScreen;
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton bOK;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tbHighScore;
    // End of variables declaration//GEN-END:variables
}
